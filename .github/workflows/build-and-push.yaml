name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: docker.io
  OPERATOR_IMAGE_NAME: rmolendijk/cupcake-operator

jobs:
  build-operator:
    name: Build Operator Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OPERATOR_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Operator image
        uses: docker/build-push-action@v6
        with:
          context: ./operator
          file: ./operator/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}


  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-operator, build-agent]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: notes
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          echo "## üßÅ CUPCAKE OPERATOR v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "### Docker Images" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "docker pull rmolendijk/cupcake-operator:v$VERSION" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "helm install cupcake docker.io/rmolendijk/cupcake --version $VERSION --namespace kube-system" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "Or with custom values:" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "helm install cupcake ./helm --namespace kube-system \\" >> release_notes.md
          echo "  --set operator.image.tag=v$VERSION \\" >> release_notes.md
          echo "  --set agent.image.tag=v$VERSION" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### Changes in this Release" >> release_notes.md
          echo "" >> release_notes.md
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> release_notes.md
          else
            echo "- Initial release" >> release_notes.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-operator, build-agent]
    if: always()

    steps:
      - name: Build Success
        if: ${{ needs.build-operator.result == 'success' && needs.build-agent.result == 'success' }}
        run: |
          echo "‚úÖ All images built successfully!"
          echo "Operator: ${{ env.REGISTRY }}/${{ env.OPERATOR_IMAGE_NAME }}"
          echo "Agent: ${{ env.REGISTRY }}/${{ env.AGENT_IMAGE_NAME }}"

      - name: Build Failed
        if: ${{ needs.build-operator.result == 'failure' || needs.build-agent.result == 'failure' }}
        run: |
          echo "‚ùå Build failed!"
          exit 1
